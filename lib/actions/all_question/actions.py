from rasa_sdk import Action
from rasa_sdk.events import SlotSet
import json
from sentence_transformers import SentenceTransformer
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
with open("questions.json", "r", encoding="utf-8") as f:
    QUESTIONS_DB = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å SentenceTransformer
model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

# –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
question_texts = [q["question"] for q in QUESTIONS_DB]
question_embeddings = model.encode(question_texts)

class AnswerQuestion(Action):
    def name(self):
        return "action_answer_question"

    def run(self, dispatcher, tracker, domain):
        user_question = tracker.latest_message['text']
        intent = tracker.latest_message.get("intent", {}).get("name")

        # –ï—Å–ª–∏ NLU –Ω–∞—à—ë–ª —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if intent and intent.startswith("question_"):
            intent_index = int(intent.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ intent
            best_match = QUESTIONS_DB[intent_index]
        else:
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            user_embedding = model.encode([user_question])[0]
            similarities = np.dot(question_embeddings, user_embedding)
            best_match_idx = np.argmax(similarities)
            best_match = QUESTIONS_DB[best_match_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        correct_answers =best_match["answers"]
        explanation = best_match["explanation"]

        dispatcher.utter_message(text=f"‚úÖ The correct answer is: {correct_answers}")
        dispatcher.utter_message(text=f"üìå Explanation: {explanation}")

        return [SlotSet("answers", best_match["answers"])]
